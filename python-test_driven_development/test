The ``101-lazy_matrix_mul`` module
======================

Using ``lazy_matrix_mul``
-------------------

Import the function:
    >>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

Test normal multiplication:
    >>> print(lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]]))
    [[ 7 10]
     [15 22]]

Test non-square matrices:
    >>> print(lazy_matrix_mul([[1, 2]], [[3, 4], [5, 6]]))
    [[13 16]]

Test with scalar input:
    >>> lazy_matrix_mul(1, [[1, 2], [3, 4]])
    Traceback (most recent call last):
    TypeError: m_a must be a list

Test with scalar input:
    >>> lazy_matrix_mul([[1, 2], [3, 4]], 1)
    Traceback (most recent call last):
    TypeError: m_b must be a list

Test with non-list input:
    >>> lazy_matrix_mul({}, [[1, 2], [3, 4]])
    Traceback (most recent call last):
    TypeError: m_a must be a list

Test with non-list input:
    >>> lazy_matrix_mul([[1, 2], [3, 4]], {})
    Traceback (most recent call last):
    TypeError: m_b must be a list

Test with non-list of lists:
    >>> lazy_matrix_mul([1, 2, 3], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    TypeError: m_a must be a list of lists

Test with non-list of lists:
    >>> lazy_matrix_mul([[1, 2], [3, 4]], [1, 2, 3])
    Traceback (most recent call last):
    TypeError: m_b must be a list of lists

Test with empty matrix:
    >>> lazy_matrix_mul([], [[1, 2]])
    Traceback (most recent call last):
    ValueError: m_a can't be empty

Test with empty matrix:
    >>> lazy_matrix_mul([[1, 2]], [])
    Traceback (most recent call last):
    ValueError: m_b can't be empty

Test with empty rows:
    >>> lazy_matrix_mul([[]], [[1, 2]])
    Traceback (most recent call last):
    ValueError: m_a can't be empty

Test with empty rows:
    >>> lazy_matrix_mul([[1, 2]], [[]])
    Traceback (most recent call last):
    ValueError: m_b can't be empty

Test with non-numeric elements:
    >>> lazy_matrix_mul([[1, "2"]], [[3, 4], [5, 6]])
    Traceback (most recent call last):
    TypeError: m_a should contain only integers or floats

Test with non-numeric elements:
    >>> lazy_matrix_mul([[1, 2]], [[3, 4], ["5", 6]])
    Traceback (most recent call last):
    TypeError: m_b should contain only integers or floats

Test with irregular matrices:
    >>> lazy_matrix_mul([[1, 2], [3, 4, 5]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    TypeError: each row of m_a must be of the same size

Test with irregular matrices:
    >>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4, 5]])
    Traceback (most recent call last):
    TypeError: each row of m_b must be of the same size

Test with incompatible dimensions:
    >>> lazy_matrix_mul([[1, 2, 3]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ValueError: m_a and m_b can't be multiplied
